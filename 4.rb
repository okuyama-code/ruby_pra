# 1から100までの数字で、7の倍数または7を含む数の合計と該当する数のリストを計算する
# p (1..100).to_a # 1 ~ 100
# p (1...100).to_a #1 ~ 99

# result = 0
# arr = []

# (1..100).each do |n|
#   if n % 7 == 0 || n.to_s.include?("7")
#     result += n
#     arr << n
#   end
# end

# p result
# p arr

result = (1..100).inject([0, []]) do |(sum, arr), n|
  if n % 7 == 0 || n.to_s.include?("7")
    [sum + n, arr << n]
  else
    [sum, arr]  # 条件に合わない場合も結果を返す。これがないとエラーになる
  end
end

p result
p result[0]
p result[1]

# eachメソッド：

# コレクションの各要素に対して処理を実行します。
# 元のコレクションを変更せず、戻り値は元のコレクション自体です。
# 副作用（例：変数の更新）を目的として使用されることが多いです。


# mapメソッド：

# コレクションの各要素に対して処理を実行し、その結果から新しい配列を作成します。
# 元のコレクションは変更せず、処理結果の新しい配列を返します。
# 変換操作に使用されることが多いです。
